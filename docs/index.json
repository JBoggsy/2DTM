{
  "api/Constants.html": {
    "href": "api/Constants.html",
    "title": "Namespace Constants | 2D Turing Machine Documentation",
    "keywords": "Namespace Constants Enums TM_Direction Enumerates the directions a Turing machine's head can move. TM_Symbol Enumerates the Turing machine \"alphabet\": which symbols can be written to cells and read by Turing machines."
  },
  "api/Constants.TM_Direction.html": {
    "href": "api/Constants.TM_Direction.html",
    "title": "Enum TM_Direction | 2D Turing Machine Documentation",
    "keywords": "Enum TM_Direction Enumerates the directions a Turing machine's head can move. Namespace : Constants Assembly : Assembly-CSharp.dll Syntax public enum TM_Direction Fields Name Description DOWN The downward (negative y) direction LEFT The leftward (negative x) direction NUMBER The number of directions a TM can go RIGHT The rightward (positive x) direction STAY Don't move in any direction. UP The upward (positive y) direction"
  },
  "api/Constants.TM_Symbol.html": {
    "href": "api/Constants.TM_Symbol.html",
    "title": "Enum TM_Symbol | 2D Turing Machine Documentation",
    "keywords": "Enum TM_Symbol Enumerates the Turing machine \"alphabet\": which symbols can be written to cells and read by Turing machines. Namespace : Constants Assembly : Assembly-CSharp.dll Syntax public enum TM_Symbol Fields Name Description NUMBER The number of different symbols in the alphabet OFF Symbol representing the off state of tiles ON Symbol representing the on state of tiles"
  },
  "api/GameCore.GameMaster.html": {
    "href": "api/GameCore.GameMaster.html",
    "title": "Class GameMaster | 2D Turing Machine Documentation",
    "keywords": "Class GameMaster The GameMaster class is the central authority in charge of running the game. The GameMaster singleton acts as a communication and control hub which components of the game communicate to and through. It maintains references to most or all core components of the backend or simulation side of the game, including the GridData , a list of TuringMachine instances, and the CameraMonobehavior . Upon instantiation, it also grabs references to a couple prefabs needed for controlling the Turing machine sprites. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Singleton < GameMaster > GameMaster Inherited Members Singleton<GameMaster>.Instance Namespace : GameCore Assembly : Assembly-CSharp.dll Syntax public class GameMaster : Singleton<GameMaster> Remarks There should (and can) only be one GameMaster instance, a singleton which every object should have access to. The GameMaster instance must be initialized using the Initialize() method after contruction. Fields | Improve this Doc View Source CameraMonobehavior Declaration protected CameraMonobehavior CameraMonobehavior Field Value Type Description CameraMonobehavior Provides the GameMaster instance a reference to the camera's monobehavior to faciliate camera control. | Improve this Doc View Source CurrentViewRect Declaration public Rect CurrentViewRect Field Value Type Description UnityEngine.Rect A simple UnityEngine.Rect which indicates which grid cells are currently in the viewport given the camera's location. | Improve this Doc View Source GridData Declaration public GridData GridData Field Value Type Description GridData Maintains the state of the grid which acts as a shared, two-dimensional tape for the Turing machines. | Improve this Doc View Source RunSimulation Declaration protected bool RunSimulation Field Value Type Description Boolean Whether the simulation is running. | Improve this Doc View Source SimulationSpeed Declaration protected float SimulationSpeed Field Value Type Description Single Delay between simulation updates, in seconds. | Improve this Doc View Source TuringMachineEditorPanelPrefab Declaration public GameObject TuringMachineEditorPanelPrefab Field Value Type Description UnityEngine.GameObject Provides a reference to the Unity prefab for creating a Turing machine editor panel. | Improve this Doc View Source TuringMachineHeadPrefab Declaration public GameObject TuringMachineHeadPrefab Field Value Type Description UnityEngine.GameObject Provides access to the Unity prefab for creating TUring machine sprites. | Improve this Doc View Source TuringMachines Declaration protected TuringMachine[] TuringMachines Field Value Type Description TuringMachine [] Maintans a list of the Turing machines in the game. Properties | Improve this Doc View Source NumberOfTuringMachines Declaration public int NumberOfTuringMachines { get; } Property Value Type Description Int32 Number of Turing machines in the simulation. | Improve this Doc View Source NumberStatesPerMachine Declaration public int NumberStatesPerMachine { get; } Property Value Type Description Int32 Maximum number of states in any Turing machine. | Improve this Doc View Source RandomBoardGeneration Declaration public bool RandomBoardGeneration { get; } Property Value Type Description Boolean Whether the cell states of the board should be randomized. Remarks DEPRECATED | Improve this Doc View Source RandomSeed Declaration public int RandomSeed { get; } Property Value Type Description Int32 Seed used for the random generation of transition tables. | Improve this Doc View Source RandomStartingTransitions Declaration public bool RandomStartingTransitions { get; } Property Value Type Description Boolean Whether new Turing machines should have randomly generated transition tables. | Improve this Doc View Source Running Declaration public bool Running { get; } Property Value Type Description Boolean Return whether the simulation is running. | Improve this Doc View Source SimulationSpeedSetting Declaration public float SimulationSpeedSetting { get; } Property Value Type Description Single Multiplier for the simulation speed. | Improve this Doc View Source UseCustomSeed Declaration public bool UseCustomSeed { get; } Property Value Type Description Boolean Whether the custom seed value be used. Methods | Improve this Doc View Source HandleButton(String) Triggered by UI buttons which are pressed. Allows the GameMaster instance to do the processing required for whatever button was pressed. Declaration public void HandleButton(string buttonName) Parameters Type Name Description String buttonName The name of the button which was pressed. | Improve this Doc View Source HandleChangeSeedButton() Change the random seed used for Turing machine generation. Declaration public void HandleChangeSeedButton() | Improve this Doc View Source HandleKeyPresses(List<KeyCode>) Triggered when a keyboard key is pressed. Allows the GameMaster instance to handle user input from the keyboard. Declaration public void HandleKeyPresses(List<KeyCode> keysPressed) Parameters Type Name Description List < KeyCode > keysPressed A list of keys which were pressed since the last update. | Improve this Doc View Source HandleMouseWheelScroll(Int32) Handle when the mouse wheel scrolls in a direction. Declaration public void HandleMouseWheelScroll(int direction) Parameters Type Name Description Int32 direction An integer either -1 or 1. | Improve this Doc View Source HandlePlayPauseButton() Play or pause the simulation. Declaration public void HandlePlayPauseButton() | Improve this Doc View Source HandleResetButton() Reset the simulation. This clears the whole board, reseting each cell to the OFF state. Then it resets all the TuringMachine instances, setting their CurrentState values to the initial state and moving them to the (0, 0) cell. Finally, it pauses the simulation. Declaration public void HandleResetButton() Remarks Under the hood, this just calls ResetGame() and then pauses the simulation. See Also ResetGame() | Improve this Doc View Source HandleSimSpeedDecreaseButton() Decrease the speed of the simulation in terms of wall time. Declaration public void HandleSimSpeedDecreaseButton() | Improve this Doc View Source HandleSimSpeedIncreaseButton() Increase the speed of the simulation in terms of wall time. Declaration public void HandleSimSpeedIncreaseButton() | Improve this Doc View Source HandleStepButton() Perform a single step and then pause the simulation Declaration public void HandleStepButton() See Also SimulateOneStep() | Improve this Doc View Source HandleTuringMachineHeadClick(Int32) Triggered when a TuringMachine 's sprite it clicked. Declaration public void HandleTuringMachineHeadClick(int machineID) Parameters Type Name Description Int32 machineID The ID of the TuringMachine whose sprite was clicked. | Improve this Doc View Source Initialize() Initializes the GameMaster singleton. This is called in the MonoBehaviours.GameMasterMonobehavior.Awake method so that all MonoBehaviours.GameMasterMonobehavior sub-classes can access the GameMaster instance. Grabs Unity prefab resources for UI and sprites, instantiates the random seed, the grid, and the Turing machines, and then begins the simulation update co-routine. Declaration public void Initialize() | Improve this Doc View Source RegisterCameraMonobehavior(CameraMonobehavior) Register the given CameraMonobehavior as the camera the GameMaster should pay attention to and interact with. Declaration public void RegisterCameraMonobehavior(CameraMonobehavior newCamera) Parameters Type Name Description CameraMonobehavior newCamera The CameraMonobehavior the GameMaster will control. | Improve this Doc View Source ResetGame() Reset the simulation/game of 2DTMs by clearing the whole board and reseting the existing Turing machines. Declaration public void ResetGame() See Also HandleResetButton() | Improve this Doc View Source SetSeed(Int32) Sets the seed used for random generation of Turing machines. Declaration public void SetSeed(int value) Parameters Type Name Description Int32 value The new value of the random seed. | Improve this Doc View Source SimulateOneStep() Simulate a single step of the \"game\" by iterating through each TuringMachine twice over. First it calls the PrepareSimulationStep(TM_Symbol) method of each TuringMachine , then it calls the ApplySimulationStep() method. Declaration public void SimulateOneStep() | Improve this Doc View Source WriteSymbolToGrid(Vector3Int, TM_Symbol) Writes the given symbol to the given location on the grid. Declaration public void WriteSymbolToGrid(Vector3Int loc, TM_Symbol symbol) Parameters Type Name Description UnityEngine.Vector3Int loc Grid location to write the symbol to. TM_Symbol symbol The symbol to write to the grid."
  },
  "api/GameCore.GridData.html": {
    "href": "api/GameCore.GridData.html",
    "title": "Class GridData | 2D Turing Machine Documentation",
    "keywords": "Class GridData The GridData class maintains the current state of the grid. The grid is the two-dimensional equivalent of a Turing machine tape. As such, Turing machines operating on the grid can read a symbol off of the grid cell they are on, can write a new symbol to the grid cell, and can move in one of the four cardinal directions. This class exists to model the grid in simulation, and has no connection with actually displaying the grid to the user. For that, see LightsLayerMonobehaviour . Inheritance Object GridData Namespace : GameCore Assembly : Assembly-CSharp.dll Syntax public class GridData Constructors | Improve this Doc View Source GridData() The default constructor. Creates a grid populated with cells containing the DEFAULT_SYMBOL . Declaration public GridData() Fields | Improve this Doc View Source CellDictionary Declaration protected Dictionary<Vector3Int, TM_Symbol> CellDictionary Field Value Type Description Dictionary < UnityEngine.Vector3Int , TM_Symbol > Holds the mapping between pairs of (row, col) grid coordinates and symbols. Each (row, col) coordinate has at most one corresponding symbol. | Improve this Doc View Source DEFAULT_SYMBOL Declaration protected const TM_Symbol DEFAULT_SYMBOL = TM_Symbol.OFF Field Value Type Description TM_Symbol The default symbol every grid cell is initialized with. Methods | Improve this Doc View Source GetCellSymbol(Vector3Int) Retrieve the symbol written to a specific cell. Declaration public TM_Symbol GetCellSymbol(Vector3Int loc) Parameters Type Name Description UnityEngine.Vector3Int loc The (row, col) coordinate of the cell to get the symbol of. Returns Type Description TM_Symbol The TM_Symbol written to the cell at loc . | Improve this Doc View Source ResetGrid() Resets the grid by calling the Clear() method. Declaration public void ResetGrid() | Improve this Doc View Source SetCellSymbol(Vector3Int, TM_Symbol) Sets the symbol of a cell to the given symbol. Completely overwrites the previous symbol. Declaration public void SetCellSymbol(Vector3Int loc, TM_Symbol symbol) Parameters Type Name Description UnityEngine.Vector3Int loc The (row, col) coordinate of the cell to write to. TM_Symbol symbol The new TM_Symbol the cell should contain. See Also LightsLayerMonobehaviour TuringMachine GameMaster"
  },
  "api/GameCore.html": {
    "href": "api/GameCore.html",
    "title": "Namespace GameCore | 2D Turing Machine Documentation",
    "keywords": "Namespace GameCore Classes GameMaster The GameMaster class is the central authority in charge of running the game. The GameMaster singleton acts as a communication and control hub which components of the game communicate to and through. It maintains references to most or all core components of the backend or simulation side of the game, including the GridData , a list of TuringMachine instances, and the CameraMonobehavior . Upon instantiation, it also grabs references to a couple prefabs needed for controlling the Turing machine sprites. GridData The GridData class maintains the current state of the grid. The grid is the two-dimensional equivalent of a Turing machine tape. As such, Turing machines operating on the grid can read a symbol off of the grid cell they are on, can write a new symbol to the grid cell, and can move in one of the four cardinal directions. This class exists to model the grid in simulation, and has no connection with actually displaying the grid to the user. For that, see LightsLayerMonobehaviour ."
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | 2D Turing Machine Documentation",
    "keywords": "Namespace Global Classes Singleton<T> Inherit from this base class to create a singleton."
  },
  "api/Global.Singleton-1.html": {
    "href": "api/Global.Singleton-1.html",
    "title": "Class Singleton<T> | 2D Turing Machine Documentation",
    "keywords": "Class Singleton<T> Inherit from this base class to create a singleton. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Singleton<T> GameMaster Namespace : Global Assembly : Assembly-CSharp.dll Syntax public class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties | Improve this Doc View Source Instance Access singleton instance through this propriety. Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/MonoBehaviours.CameraMonobehavior.html": {
    "href": "api/MonoBehaviours.CameraMonobehavior.html",
    "title": "Class CameraMonobehavior | 2D Turing Machine Documentation",
    "keywords": "Class CameraMonobehavior Monobehaviour for controlling the cmaera. This monobehaviour handles moving or zooming the camera in the Unity simulation. It is managed by the GameMaster singleton instance. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GameObjectMonobehavior CameraMonobehavior Inherited Members GameObjectMonobehavior.GM GameObjectMonobehavior.SetGameMaster(GameMaster) Namespace : MonoBehaviours Assembly : Assembly-CSharp.dll Syntax public class CameraMonobehavior : GameObjectMonobehavior Methods | Improve this Doc View Source MoveInDirection(TM_Direction) Move the camera in the given direction. Declaration public void MoveInDirection(TM_Direction dir) Parameters Type Name Description TM_Direction dir The direction to move the camera. One of: UP DOWN LEFT RIGHT | Improve this Doc View Source Start() When Unity starts, register this monobehaviour with the GameMaster set the viewing rectangle. Declaration protected override void Start() Overrides GameObjectMonobehavior.Start() | Improve this Doc View Source ZoomCamera(Int32) Zooms the camera in or out by changing its UnityEngine.Camera.orthographicSize property. This seems to be equivalent in 2D Unity to moving the camera backwards. Declaration public void ZoomCamera(int direction) Parameters Type Name Description Int32 direction An integer either -1 or 1, where: -1Zooms out 1Zooms in"
  },
  "api/MonoBehaviours.GameObjectMonobehavior.html": {
    "href": "api/MonoBehaviours.GameObjectMonobehavior.html",
    "title": "Class GameObjectMonobehavior | 2D Turing Machine Documentation",
    "keywords": "Class GameObjectMonobehavior A parent class for all other Monobehaviors in 2DTM which provides them with a private GM field giving easy access to the GameMaster instance. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GameObjectMonobehavior CameraMonobehavior TuringMachineHeadMonobehavior LabelMonobehavior Namespace : MonoBehaviours Assembly : Assembly-CSharp.dll Syntax public class GameObjectMonobehavior : MonoBehaviour Fields | Improve this Doc View Source GM Declaration protected static GameMaster GM Field Value Type Description GameMaster The GameMaster singleton instance. Methods | Improve this Doc View Source SetGameMaster(GameMaster) Sets the value of GM to the GameMaster singleton instance. Declaration public static void SetGameMaster(GameMaster newGM) Parameters Type Name Description GameMaster newGM The new GameMaster instance. | Improve this Doc View Source Start() Declaration protected virtual void Start()"
  },
  "api/MonoBehaviours.html": {
    "href": "api/MonoBehaviours.html",
    "title": "Namespace MonoBehaviours | 2D Turing Machine Documentation",
    "keywords": "Namespace MonoBehaviours Classes CameraMonobehavior Monobehaviour for controlling the cmaera. This monobehaviour handles moving or zooming the camera in the Unity simulation. It is managed by the GameMaster singleton instance. GameObjectMonobehavior A parent class for all other Monobehaviors in 2DTM which provides them with a private GM field giving easy access to the GameMaster instance. TuringMachineHeadMonobehavior Monobehaviour for the Turing machine heads being rendered in the Unity scene. This controls the actual movement of the sprites in Unity. A TuringMachine instance manages a corresponding TuringMachineHeadMonobehavior instance."
  },
  "api/MonoBehaviours.TuringMachineHeadMonobehavior.html": {
    "href": "api/MonoBehaviours.TuringMachineHeadMonobehavior.html",
    "title": "Class TuringMachineHeadMonobehavior | 2D Turing Machine Documentation",
    "keywords": "Class TuringMachineHeadMonobehavior Monobehaviour for the Turing machine heads being rendered in the Unity scene. This controls the actual movement of the sprites in Unity. A TuringMachine instance manages a corresponding TuringMachineHeadMonobehavior instance. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GameObjectMonobehavior TuringMachineHeadMonobehavior Inherited Members GameObjectMonobehavior.GM GameObjectMonobehavior.Start() GameObjectMonobehavior.SetGameMaster(GameMaster) Namespace : MonoBehaviours Assembly : Assembly-CSharp.dll Syntax public class TuringMachineHeadMonobehavior : GameObjectMonobehavior Fields | Improve this Doc View Source id Declaration public int id Field Value Type Description Int32 A unique identifier for this Truing machine head. Properties | Improve this Doc View Source position Indicates where the Turing machine head is located. Declaration public Vector3 position { get; } Property Value Type Description UnityEngine.Vector3 The position of the Turing machine head in world space (not in grid coordinates). Methods | Improve this Doc View Source MoveHeadInDirection(TM_Direction) Moves the Turing machine head 1 unit in the given direction. Declaration public void MoveHeadInDirection(TM_Direction dir) Parameters Type Name Description TM_Direction dir The direction in which to move. | Improve this Doc View Source MoveHeadTo(Vector3Int) Moves the Turing machine head to an arbitrary grid location. Declaration public void MoveHeadTo(Vector3Int newLocation) Parameters Type Name Description UnityEngine.Vector3Int newLocation The (row, col) location the Turing machine head should be moved to. | Improve this Doc View Source MoveHeadToCenter() Moves the hard from wherever it is to the center of the grid, (0, 0). Declaration public void MoveHeadToCenter() See Also TuringMachine"
  },
  "api/MonoBehaviours.UI.GlassLayerMonobehaviour.html": {
    "href": "api/MonoBehaviours.UI.GlassLayerMonobehaviour.html",
    "title": "Class GlassLayerMonobehaviour | 2D Turing Machine Documentation",
    "keywords": "Class GlassLayerMonobehaviour The monobehaviour for the Unity renderer responsible for rendering the glass-like covering of the cells on the grid. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GlassLayerMonobehaviour Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class GlassLayerMonobehaviour : MonoBehaviour Fields | Improve this Doc View Source Camera Declaration public Camera Camera Field Value Type Description UnityEngine.Camera | Improve this Doc View Source Shader Declaration public Shader Shader Field Value Type Description UnityEngine.Shader Methods | Improve this Doc View Source Awake() Declaration public void Awake()"
  },
  "api/MonoBehaviours.UI.html": {
    "href": "api/MonoBehaviours.UI.html",
    "title": "Namespace MonoBehaviours.UI | 2D Turing Machine Documentation",
    "keywords": "Namespace MonoBehaviours.UI Classes GlassLayerMonobehaviour The monobehaviour for the Unity renderer responsible for rendering the glass-like covering of the cells on the grid. LabelMonobehavior Monobehaviour for UI labels. Allows programmatic changes to labels. LightsLayerMonobehaviour The monobehaviour for the Unity renderer responsible for rendering the \"lights\" representing the state of the grid cells. PlayButtonMonobehaviour Special monobehaviour for the play/pause button. Allows the sprite to change from the play symbol to the pause symbol. SimulationControlCanvasMonobehavior Monobehaviour for the UI_Canvas Unity hierarchy element. Mainly serves as a hub for handling button clicks. TuringMachineEditorPanel Monobehaviour for the Turing machine editor UI element."
  },
  "api/MonoBehaviours.UI.LabelMonobehavior.html": {
    "href": "api/MonoBehaviours.UI.LabelMonobehavior.html",
    "title": "Class LabelMonobehavior | 2D Turing Machine Documentation",
    "keywords": "Class LabelMonobehavior Monobehaviour for UI labels. Allows programmatic changes to labels. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GameObjectMonobehavior LabelMonobehavior Inherited Members GameObjectMonobehavior.GM GameObjectMonobehavior.Start() GameObjectMonobehavior.SetGameMaster(GameMaster) Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class LabelMonobehavior : GameObjectMonobehavior Methods | Improve this Doc View Source GetLabel() Declaration public string GetLabel() Returns Type Description String | Improve this Doc View Source SetLabel(Boolean) Declaration public void SetLabel(bool newLabel) Parameters Type Name Description Boolean newLabel | Improve this Doc View Source SetLabel(Int32) Declaration public void SetLabel(int newLabel) Parameters Type Name Description Int32 newLabel | Improve this Doc View Source SetLabel(Single) Declaration public void SetLabel(float newLabel) Parameters Type Name Description Single newLabel | Improve this Doc View Source SetLabel(String) Declaration public void SetLabel(string newLabel) Parameters Type Name Description String newLabel"
  },
  "api/MonoBehaviours.UI.LightsLayerMonobehaviour.html": {
    "href": "api/MonoBehaviours.UI.LightsLayerMonobehaviour.html",
    "title": "Class LightsLayerMonobehaviour | 2D Turing Machine Documentation",
    "keywords": "Class LightsLayerMonobehaviour The monobehaviour for the Unity renderer responsible for rendering the \"lights\" representing the state of the grid cells. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LightsLayerMonobehaviour Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class LightsLayerMonobehaviour : MonoBehaviour Fields | Improve this Doc View Source Camera Declaration public Camera Camera Field Value Type Description UnityEngine.Camera | Improve this Doc View Source ErrorColor Declaration public Color ErrorColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source OffColor Declaration public Color OffColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source OnColor Declaration public Color OnColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source Shader Declaration public Shader Shader Field Value Type Description UnityEngine.Shader Methods | Improve this Doc View Source Awake() Declaration public void Awake()"
  },
  "api/MonoBehaviours.UI.PlayButtonMonobehaviour.html": {
    "href": "api/MonoBehaviours.UI.PlayButtonMonobehaviour.html",
    "title": "Class PlayButtonMonobehaviour | 2D Turing Machine Documentation",
    "keywords": "Class PlayButtonMonobehaviour Special monobehaviour for the play/pause button. Allows the sprite to change from the play symbol to the pause symbol. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour PlayButtonMonobehaviour Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class PlayButtonMonobehaviour : MonoBehaviour Fields | Improve this Doc View Source PauseTexture Declaration public Texture2D PauseTexture Field Value Type Description UnityEngine.Texture2D | Improve this Doc View Source PlayTexture Declaration public Texture2D PlayTexture Field Value Type Description UnityEngine.Texture2D Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source UpdateTexture() Declaration public void UpdateTexture()"
  },
  "api/MonoBehaviours.UI.SimulationControlCanvasMonobehavior.html": {
    "href": "api/MonoBehaviours.UI.SimulationControlCanvasMonobehavior.html",
    "title": "Class SimulationControlCanvasMonobehavior | 2D Turing Machine Documentation",
    "keywords": "Class SimulationControlCanvasMonobehavior Monobehaviour for the UI_Canvas Unity hierarchy element. Mainly serves as a hub for handling button clicks. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SimulationControlCanvasMonobehavior Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class SimulationControlCanvasMonobehavior : MonoBehaviour Fields | Improve this Doc View Source GenerationLabel Declaration public Text GenerationLabel Field Value Type Description UnityEngine.UI.Text | Improve this Doc View Source PlayButton Declaration public PlayButtonMonobehaviour PlayButton Field Value Type Description PlayButtonMonobehaviour | Improve this Doc View Source SeedField Declaration public InputField SeedField Field Value Type Description UnityEngine.UI.InputField | Improve this Doc View Source SpeedLabel Declaration public Text SpeedLabel Field Value Type Description UnityEngine.UI.Text Methods | Improve this Doc View Source ChangeSeed(String) Declaration public void ChangeSeed(string value) Parameters Type Name Description String value | Improve this Doc View Source Faster() Declaration public void Faster() | Improve this Doc View Source Play() Declaration public void Play() | Improve this Doc View Source Randomize() Declaration public void Randomize() | Improve this Doc View Source Restart() Declaration public void Restart() | Improve this Doc View Source Slower() Declaration public void Slower() | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Step() Declaration public void Step()"
  },
  "api/MonoBehaviours.UI.TuringMachineEditorPanel.html": {
    "href": "api/MonoBehaviours.UI.TuringMachineEditorPanel.html",
    "title": "Class TuringMachineEditorPanel | 2D Turing Machine Documentation",
    "keywords": "Class TuringMachineEditorPanel Monobehaviour for the Turing machine editor UI element. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour TuringMachineEditorPanel Namespace : MonoBehaviours.UI Assembly : Assembly-CSharp.dll Syntax public class TuringMachineEditorPanel : MonoBehaviour"
  },
  "api/TuringMachines.html": {
    "href": "api/TuringMachines.html",
    "title": "Namespace TuringMachines | 2D Turing Machine Documentation",
    "keywords": "Namespace TuringMachines Classes Transition The Transition class holds a triple (int NEXT, TM_Direction DIR, TM_Symbol WRITE) which describes the outcome of a particular transition. TuringMachine The TuringMachine class represents the internal mathmatical Turing machine model of a Turing machine in the game."
  },
  "api/TuringMachines.Transition.html": {
    "href": "api/TuringMachines.Transition.html",
    "title": "Class Transition | 2D Turing Machine Documentation",
    "keywords": "Class Transition The Transition class holds a triple (int NEXT, TM_Direction DIR, TM_Symbol WRITE) which describes the outcome of a particular transition. Inheritance Object Transition Namespace : TuringMachines Assembly : Assembly-CSharp.dll Syntax public class Transition Constructors | Improve this Doc View Source Transition() Create a new Transition object for use in the transition table. Declaration public Transition() | Improve this Doc View Source Transition(Int32, TM_Direction, TM_Symbol) Create a Turing machine transition to be placed in the transition table. Declaration public Transition(int nextState, TM_Direction direction, TM_Symbol writeSymbol) Parameters Type Name Description Int32 nextState The ID of the state to transition to. NextState TM_Direction direction The direction code for the head to move. Direction TM_Symbol writeSymbol The symbol to write to the grid. WriteSymbol Properties | Improve this Doc View Source Direction Declaration public TM_Direction Direction { get; set; } Property Value Type Description TM_Direction DIR indicates the direction for the r/w head to move | Improve this Doc View Source NextState Declaration public int NextState { get; set; } Property Value Type Description Int32 NEXT indicates the state ID to transition to | Improve this Doc View Source WriteSymbol Declaration public TM_Symbol WriteSymbol { get; set; } Property Value Type Description TM_Symbol WRITE indicates the symbol to write to the grid Methods | Improve this Doc View Source ToString() Returns a string representation of a Transition Declaration public string ToString() Returns Type Description String A human-readable representation of the Transition"
  },
  "api/TuringMachines.TuringMachine.html": {
    "href": "api/TuringMachines.TuringMachine.html",
    "title": "Class TuringMachine | 2D Turing Machine Documentation",
    "keywords": "Class TuringMachine The TuringMachine class represents the internal mathmatical Turing machine model of a Turing machine in the game. Inheritance Object TuringMachine Namespace : TuringMachines Assembly : Assembly-CSharp.dll Syntax public class TuringMachine Remarks A TuringMachine instance contains three pieces of internal state data as well as accessory data and methods which allow the Turing machine to be run. In particular, it has a number of states represented as integer IDs, maintains the ID of the CurrentState , and a UnityEngine.TransitionType serving as a function defined as d(symbol, state)->(state, direction, symbol) . A formal, mathematical Turing machine is defined as a 7-tuple which includes A set of States An alphabet of symbols An initial state A set of accepting States A transition function as well as a couple others. To learn more about mathematical Turing machines, see https://en.wikipedia.org/wiki/Turing_machine . Constructors | Improve this Doc View Source TuringMachine(Int32, Int32) Create a new Turing machine instance with the given ID and number of states. This method initializes the TransitionTable , headObject , and headMonobehavior attributes. Declaration public TuringMachine(int id, int numberOfStates) Parameters Type Name Description Int32 id A unique integer identifying this Turing machine. Int32 numberOfStates Fields | Improve this Doc View Source GM Declaration protected GameMaster GM Field Value Type Description GameMaster The GameMaster signleton instance. | Improve this Doc View Source headMonobehavior Declaration protected TuringMachineHeadMonobehavior headMonobehavior Field Value Type Description TuringMachineHeadMonobehavior The monobehaviour of the Turing machine's sprite in the simulation visualization. | Improve this Doc View Source headObject Declaration protected GameObject headObject Field Value Type Description UnityEngine.GameObject The UnityEngine.GameObject which corresponds to the Turing machine's sprite in the board visualization. | Improve this Doc View Source nextTransition Declaration protected Transition nextTransition Field Value Type Description Transition The Transition instance which will be applied at the end of the next simulation update. | Improve this Doc View Source TransitionTable Declaration protected Dictionary<(int, TM_Symbol), Transition> TransitionTable Field Value Type Description Dictionary < ValueTuple < Int32 , TM_Symbol >, Transition > The Turing machine's transition table. Maps (state, input) pairs to corresponding Transition instances. Each unique (state, input) pair maps to a unique Transition . Properties | Improve this Doc View Source CurrentState Declaration public int CurrentState { get; } Property Value Type Description Int32 The FSM state the Turing machine is currently in. | Improve this Doc View Source ID Declaration public int ID { get; } Property Value Type Description Int32 A unique ID assigned to the Turing machine. The corresponding Turing machine head sprite in the Unity view has the same ID. | Improve this Doc View Source NumberOfStates Declaration public int NumberOfStates { get; } Property Value Type Description Int32 The number of states in the Turing machine's FSM. | Improve this Doc View Source position Returns the coordinates of the read/write head on the grid. Declaration public Vector3Int position { get; } Property Value Type Description UnityEngine.Vector3Int Methods | Improve this Doc View Source AddTransition(TM_Symbol, Int32, Transition) Add a new Transition to the transition table. Insert the given Transition into the TransitionTable at the specified pair of input symbol and current state. This partially defines the transition function d for d(symbol, state) Declaration public void AddTransition(TM_Symbol input, int state, Transition transition) Parameters Type Name Description TM_Symbol input The input symbol the transition requires Int32 state The state the TM should be in for the transition Transition transition The Transition object to be used | Improve this Doc View Source AddTransition(Int32, Int32, Int32, Int32, Int32) Add a new transition to the transition table. First creates a Transition based on the last three parameters, then inserts the Transition into the TransitionTable at the specified pair of input symbol and current state. This partially defines the transition function d for d(symbol, state) Declaration public void AddTransition(int symbol, int state, int nextState, int direction, int writeSymbol) Parameters Type Name Description Int32 symbol The input symbol the transition requires Int32 state The state the TM should be in for the transition Int32 nextState The ID of the state to transition to Int32 direction The direction code for the head to move Int32 writeSymbol The symbol to write to the grid | Improve this Doc View Source AddTransition(Int32, Int32, Transition) Add a new transition to the transition table. Insert the given Transition into the transition table at the specified pair of input symbol and current state. This partially defines the transition function d for d(symbol, state) Declaration public void AddTransition(int input, int state, Transition transition) Parameters Type Name Description Int32 input The input symbol the transition requires Int32 state The state the TM should be in for the transition Transition transition The Transition object to be used | Improve this Doc View Source ApplySimulationStep() Performs the first step of simulating this Turing machine's next step in simulation. Since there may be multiple Turing machines which share the same grid which they all write to, there is a significant difference between simulating the machines in parallel and serially. If the machines are simulated in serial, the order in which they are simulated matters a lot. In order to avoid this, we want to simulate them in parallel, and therefor every Turing machine must first determine what it will do at the next simulation step before any Turing can apply those changes This method is the second step of that process, applying the predicted changes to the board. It references the current value of the nextTransition to write a symbol to the grid, move the Turing Machine's head, and change the current state. Declaration public void ApplySimulationStep() Remarks This method DOES NOT handle conflict resolution in terms of movement collision or simultaneous writing to the same cell. | Improve this Doc View Source GenerateRandomTransitions() Fills the TransitionTable with randomly-generated valid transitions. The algorithm simply iterates through each possible state-input pair and chooses a random next state, symbol to write, and direction to move. Declaration public void GenerateRandomTransitions() Remarks This method guarantees a non-halting Turing machine. | Improve this Doc View Source GetTransition(Int32, TM_Symbol) Get the Transition produced by the transition function. Given the current state and the symbol read in by the Turing machine head, produce a transition triple (nextState, moveDirection, writeSymbol). If the (currentState, inputSymbol) pair doesn't have a defined transition, it halts the machine. Declaration public Transition GetTransition(int currentState, TM_Symbol inputSymbol) Parameters Type Name Description Int32 currentState The current state the machine is in TM_Symbol inputSymbol The symbol the read/write head read in Returns Type Description Transition The result of calling the transition function d on currentState and inputSymbol , represented as a Transition object. | Improve this Doc View Source PrepareSimulationStep(TM_Symbol) Performs the first step of simulating this Turing machine's next step in simulation. Since there may be multiple Turing machines which share the same grid which they all write to, there is a significant difference between simulating the machines in parallel and serially. If the machines are simulated in serial, the order in which they are simulated matters a lot. In order to avoid this, we want to simulate them in parallel, and therefor every Turing machine must first determine what it will do at the next simulation step before any Turing can apply those changes. This method is the first step of that process, determining what state changes the Turing machine will make based on the current state of the grid. It sets the nextTransition attribute to the Transition instance returned by querying the GetTransition(Int32, TM_Symbol) method with the current input and state. Declaration public void PrepareSimulationStep(TM_Symbol inputSymbol) Parameters Type Name Description TM_Symbol inputSymbol The current state and current input (the symbol in the cell the Turing machine is occupying). | Improve this Doc View Source RemoveTransition(Int32, TM_Symbol) Remove the transition given be d(state, input) . The previous value for that input is replaced with null, which indicates a halting state. Declaration public void RemoveTransition(int currentState, TM_Symbol inputSymbol) Parameters Type Name Description Int32 currentState An integer between 0 and NumberOfStates . Part of the (state, input) pair. TM_Symbol inputSymbol A valid TM_Symbol . Part of the (state, inpit pair). | Improve this Doc View Source Reset() Reset the Turing machine by returning it to its initial FSM state and moving it to the center of the board. Declaration public void Reset() | Improve this Doc View Source ToString() Get a human-readable string representation of this Turing machine. String contains the current state of the Turing machine and its TransitionTable . Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "index.html": {
    "href": "index.html",
    "title": "2D Turing Machines Game | 2D Turing Machine Documentation",
    "keywords": "2D Turing Machines Game James Boggs with assistance from Matt Goff"
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | 2D Turing Machine Documentation",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | 2D Turing Machine Documentation",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}