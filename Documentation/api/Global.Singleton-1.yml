### YamlMime:ManagedReference
items:
- uid: Global.Singleton`1
  commentId: T:Global.Singleton`1
  id: Singleton`1
  parent: Global
  children:
  - Global.Singleton`1.Instance
  langs:
  - csharp
  - vb
  name: Singleton<T>
  nameWithType: Singleton<T>
  fullName: Singleton<T>
  type: Class
  source:
    remote:
      path: Assets/Scripts/Singleton.cs
      branch: master
      repo: https://github.com/JBoggsy/2DTM.git
    id: Singleton
    path: ../Assets/Scripts/Singleton.cs
    startLine: 5
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nInherit from this base class to create a singleton.\n"
  example: []
  syntax:
    content: 'public class Singleton<T> : MonoBehaviour where T : MonoBehaviour'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Singleton(Of T As MonoBehaviour)
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  derivedClasses:
  - GameCore.GameMaster
  nameWithType.vb: Singleton(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Singleton(Of T)
  name.vb: Singleton(Of T)
- uid: Global.Singleton`1.Instance
  commentId: P:Global.Singleton`1.Instance
  id: Instance
  parent: Global.Singleton`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Singleton<T>.Instance
  type: Property
  source:
    remote:
      path: Assets/Scripts/Singleton.cs
      branch: master
      repo: https://github.com/JBoggsy/2DTM.git
    id: Instance
    path: ../Assets/Scripts/Singleton.cs
    startLine: 15
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nAccess singleton instance through this propriety.\n"
  example: []
  syntax:
    content: public static T Instance { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared ReadOnly Property Instance As T
  overload: Global.Singleton`1.Instance*
  nameWithType.vb: Singleton(Of T).Instance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: Singleton(Of T).Instance
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.Singleton`1.Instance*
  commentId: Overload:Global.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Singleton<T>.Instance
  nameWithType.vb: Singleton(Of T).Instance
  fullName.vb: Singleton(Of T).Instance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  name: T
  nameWithType: T
  fullName: T
